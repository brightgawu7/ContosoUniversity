@using Blazored.FluentValidation
@using ContosoUniversity.Shared.DTOs.Students;
@inject IStudentService studentService
@inject SweetAlertService Swal


<div>

	<EditForm Model="@createStudentModel" OnValidSubmit="@HandleValidSubmitAsync" class="w-[40%]">
		<FluentValidationValidator />

		<div class="pl-2 mt-4">
			<label for="FirstName" class="block mb-2 text-sm font-medium text-gray-900 ">Last Name</label>
			<InputText @bind-Value="createStudentModel.LastName" id="FirstName" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-[90%] p-2.5" />
			<ValidationMessage class="text-red-500" For="@(()=>createStudentModel.LastName)" />

		</div>
		<div class="pl-2 mt-4">
			<label for="FirstMidName" class="block mb-2 text-sm font-medium text-gray-900 ">First And Middle Name</label>
			<InputText @bind-Value="createStudentModel.FirstMidName" id="FirstMidName" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-[90%] p-2.5" />
			<ValidationMessage class="text-red-500" For="@(()=>createStudentModel.FirstMidName)" />

		</div>
		<div class="pl-2 mt-4">
			<label for="EnrollmentDate" class="block mb-2 text-sm font-medium text-gray-900 ">Enrollment Date</label>
			<InputDate @bind-Value="createStudentModel.EnrollmentDate" id="EnrollmentDate" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-[90%] p-2.5" />
			<ValidationMessage class="text-red-500" For="@(()=>createStudentModel.EnrollmentDate)" />

		</div>
		<div class="pl-2 mt-4">
			<button type="submit" class="text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2">
				@(Id == 0 ? "Create" : "Edit")
			</button>

		</div>
	</EditForm>
</div>


@code {
	CreateUpdateStudentDTO createStudentModel = new();
	[Parameter]
	public int Id { get; set; }
	[Parameter]
	public CreateUpdateStudentDTO? student { get; set; }


	protected override void OnParametersSet()
	{
		createStudentModel = student ?? new();
	}

	private async Task HandleValidSubmitAsync()
	{
		if (Id == 0)
		{
			try
			{
				await studentService.CreateStudent(createStudentModel);
				await Swal.FireAsync(new SweetAlertOptions
					{
						Text = "Student Created Successfully",
						Icon = SweetAlertIcon.Success,

					});

			}
			catch
			{

			}
		}
		else
		{
			await studentService.UpdateStudent(createStudentModel, Id);
			await Swal.FireAsync(new SweetAlertOptions
				{
					Text = "Student Edited Successfully",
					Icon = SweetAlertIcon.Success,

				});
		}
	}
}
